1. Write a Java program to create a class called "Person" with a name and age attribute. Create two instances of the "Person" class, set their attributes using the constructor, and print their name and age.
--------------------------------------------------------------------
```java
class Person {
    String name;
    int age;
    Person(String name, int age) { this.name = name; this.age = age; }
    void printInfo() { System.out.println("Name: " + name + ", Age: " + age); }
    public static void main(String[] args) {
        Person p1 = new Person("Alice", 30);
        Person p2 = new Person("Bob", 25);
        p1.printInfo();
        p2.printInfo();
    }
}
```
Output:
Name: Alice, Age: 30  
Name: Bob, Age: 25

--------------------------------------------------------------------

2. Write a Java program to create a class called "Dog" with a name and breed attribute. Create two instances of the "Dog" class, set their attributes using the constructor and modify the attributes using the setter methods and print the updated values.
--------------------------------------------------------------------
```java
class Dog {
    String name, breed;
    Dog(String name, String breed) { this.name = name; this.breed = breed; }
    void setName(String name) { this.name = name; }
    void setBreed(String breed) { this.breed = breed; }
    void printInfo() { System.out.println("Dog Name: " + name + ", Breed: " + breed); }
    public static void main(String[] args) {
        Dog d1 = new Dog("Max", "Labrador");
        Dog d2 = new Dog("Bella", "Beagle");
        d1.setName("Charlie");
        d1.setBreed("Golden Retriever");
        d1.printInfo();
        d2.printInfo();
    }
}
```
Output:
Dog Name: Charlie, Breed: Golden Retriever  
Dog Name: Bella, Breed: Beagle

--------------------------------------------------------------------

3. Write a Java program to create a class called "Rectangle" with width and height attributes. Calculate the area and perimeter of the rectangle.
--------------------------------------------------------------------
```java
class Rectangle {
    double width, height;
    Rectangle(double width, double height) { this.width = width; this.height = height; }
    double area() { return width * height; }
    double perimeter() { return 2 * (width + height); }
    public static void main(String[] args) {
        Rectangle r = new Rectangle(5, 3);
        System.out.println("Area: " + r.area());
        System.out.println("Perimeter: " + r.perimeter());
    }
}
```
Output:
Area: 15.0  
Perimeter: 16.0

--------------------------------------------------------------------

4. Write a Java program to create a class called "Circle" with a radius attribute. You can access and modify this attribute. Calculate the area and circumference of the circle.
--------------------------------------------------------------------
```java
class Circle {
    double radius;
    Circle(double radius) { this.radius = radius; }
    double area() { return Math.PI * radius * radius; }
    double circumference() { return 2 * Math.PI * radius; }
    public static void main(String[] args) {
        Circle c = new Circle(4);
        System.out.printf("Area: %.2f\n", c.area());
        System.out.printf("Circumference: %.2f\n", c.circumference());
    }
}
```
Output:
Area: 50.27  
Circumference: 25.13

--------------------------------------------------------------------

5. Write a Java program to create a class called "Book" with attributes for title, author, and ISBN, and methods to add and remove books from a collection.
--------------------------------------------------------------------
```java
import java.util.*;
class Book {
    String title, author, isbn;
    Book(String title, String author, String isbn) { this.title = title; this.author = author; this.isbn = isbn; }
    public String toString() { return title + " by " + author + " (ISBN: " + isbn + ")"; }
    public static void main(String[] args) {
        List<Book> books = new ArrayList<>();
        Book b1 = new Book("Java Basics", "John Doe", "123");
        Book b2 = new Book("OOP", "Jane Smith", "456");
        books.add(b1); books.add(b2);
        System.out.println("Books:");
        for (Book b : books) System.out.println(b);
        books.remove(b1);
        System.out.println("After removal:");
        for (Book b : books) System.out.println(b);
    }
}
```
Output:
Books:  
Java Basics by John Doe (ISBN: 123)  
OOP by Jane Smith (ISBN: 456)  
After removal:  
OOP by Jane Smith (ISBN: 456)

--------------------------------------------------------------------

6. Write a Java program to create a class called "Employee" with a name, job title, and salary attributes, and methods to calculate and update salary.
--------------------------------------------------------------------
```java
class Employee {
    String name, jobTitle;
    double salary;
    Employee(String name, String jobTitle, double salary) { this.name = name; this.jobTitle = jobTitle; this.salary = salary; }
    void updateSalary(double newSalary) { this.salary = newSalary; }
    double calculateAnnualSalary() { return salary * 12; }
    public static void main(String[] args) {
        Employee e = new Employee("Sam", "Manager", 5000);
        System.out.println(e.name + " (" + e.jobTitle + "), Salary: " + e.salary);
        e.updateSalary(6000);
        System.out.println(e.name + " (" + e.jobTitle + "), Salary: " + e.salary);
        System.out.println("Annual Salary: " + e.calculateAnnualSalary());
    }
}
```
Output:
Sam (Manager), Salary: 5000.0  
Sam (Manager), Salary: 6000.0  
Annual Salary: 72000.0

--------------------------------------------------------------------

7. Write a Java program to create a class called "Bank" with a collection of accounts and methods to add and remove accounts, and to deposit and withdraw money. Also define a class called "Account" to maintain account details of a particular customer.
--------------------------------------------------------------------
```java
import java.util.*;
class Account {
    String accountNumber, customerName;
    double balance;
    Account(String accountNumber, String customerName, double balance) {
        this.accountNumber = accountNumber; this.customerName = customerName; this.balance = balance;
    }
    void deposit(double amount) { balance += amount; }
    boolean withdraw(double amount) { if (amount > balance) return false; balance -= amount; return true; }
    public String toString() { return accountNumber + ": " + customerName + ", Balance: " + balance; }
}
class Bank {
    List<Account> accounts = new ArrayList<>();
    void addAccount(Account acc) { accounts.add(acc); }
    void removeAccount(Account acc) { accounts.remove(acc); }
    void deposit(String accNum, double amt) {
        for (Account a : accounts) if (a.accountNumber.equals(accNum)) a.deposit(amt);
    }
    boolean withdraw(String accNum, double amt) {
        for (Account a : accounts) if (a.accountNumber.equals(accNum)) return a.withdraw(amt);
        return false;
    }
    void printAccounts() { for (Account a : accounts) System.out.println(a); }
    public static void main(String[] args) {
        Bank bank = new Bank();
        Account acc1 = new Account("A001", "Tom", 1000), acc2 = new Account("A002", "Jerry", 2000);
        bank.addAccount(acc1); bank.addAccount(acc2);
        bank.deposit("A001", 500); bank.withdraw("A002", 300);
        bank.printAccounts();
    }
}
```
Output:
A001: Tom, Balance: 1500.0  
A002: Jerry, Balance: 1700.0

--------------------------------------------------------------------

8. Write a Java program to create class called "TrafficLight" with attributes for color and duration, and methods to change the color and check for red or green.
--------------------------------------------------------------------
```java
class TrafficLight {
    String color;
    int duration;
    TrafficLight(String color, int duration) { this.color = color; this.duration = duration; }
    void changeColor(String color, int duration) { this.color = color; this.duration = duration; }
    boolean isRed() { return "red".equalsIgnoreCase(color); }
    boolean isGreen() { return "green".equalsIgnoreCase(color); }
    public static void main(String[] args) {
        TrafficLight tl = new TrafficLight("red", 30);
        System.out.println("Color: " + tl.color + ", Duration: " + tl.duration);
        tl.changeColor("green", 45);
        System.out.println("Color: " + tl.color + ", Duration: " + tl.duration);
        System.out.println("Is Red? " + tl.isRed());
        System.out.println("Is Green? " + tl.isGreen());
    }
}
```
Output:
Color: red, Duration: 30  
Color: green, Duration: 45  
Is Red? false  
Is Green? true

--------------------------------------------------------------------

9. Write a Java program to create a class called "Employee" with a name, salary, and hire date attributes, and a method to calculate years of service.
--------------------------------------------------------------------
```java
import java.time.*;
class Employee {
    String name;
    double salary;
    LocalDate hireDate;
    Employee(String name, double salary, LocalDate hireDate) {
        this.name = name; this.salary = salary; this.hireDate = hireDate;
    }
    int yearsOfService() { return Period.between(hireDate, LocalDate.now()).getYears(); }
    public static void main(String[] args) {
        Employee e = new Employee("Linda", 7000, LocalDate.of(2015, 6, 1));
        System.out.println(e.name + ", Salary: " + e.salary + ", Years of Service: " + e.yearsOfService());
    }
}
```
Output (as of 2025):  
Linda, Salary: 7000.0, Years of Service: 10

--------------------------------------------------------------------

10. Write a Java program to create a class called "Student" with a name, grade, and courses attributes, and methods to add and remove courses.
--------------------------------------------------------------------
```java
import java.util.*;
class Student {
    String name, grade;
    List<String> courses = new ArrayList<>();
    Student(String name, String grade) { this.name = name; this.grade = grade; }
    void addCourse(String course) { courses.add(course); }
    void removeCourse(String course) { courses.remove(course); }
    public static void main(String[] args) {
        Student s = new Student("Mike", "A");
        s.addCourse("Math"); s.addCourse("Science"); s.removeCourse("Math");
        System.out.println(s.name + ", Grade: " + s.grade + ", Courses: " + s.courses);
    }
}
```
Output:
Mike, Grade: A, Courses: [Science]

--------------------------------------------------------------------

11. Write a Java program to create a class called "Library" with a collection of books and methods to add and remove books.
--------------------------------------------------------------------
```java
import java.util.*;
class Book {
    String title;
    Book(String title) { this.title = title; }
    public String toString() { return title; }
}
class Library {
    List<Book> books = new ArrayList<>();
    void addBook(Book b) { books.add(b); }
    void removeBook(Book b) { books.remove(b); }
    void printBooks() { for (Book b : books) System.out.println(b); }
    public static void main(String[] args) {
        Library lib = new Library();
        Book b1 = new Book("Java Basics"), b2 = new Book("OOP");
        lib.addBook(b1); lib.addBook(b2);
        lib.printBooks();
        lib.removeBook(b1);
        lib.printBooks();
    }
}
```
Output:
Java Basics  
OOP  
OOP

--------------------------------------------------------------------

12. Write a Java program to create a class called "Airplane" with a flight number, destination, and departure time attributes, and methods to check flight status and delay.
--------------------------------------------------------------------
```java
import java.time.*;
class Airplane {
    String flightNumber, destination;
    LocalTime departureTime;
    boolean delayed = false;
    Airplane(String flightNumber, String destination, LocalTime departureTime) {
        this.flightNumber = flightNumber; this.destination = destination; this.departureTime = departureTime;
    }
    void delayFlight(int minutes) { departureTime = departureTime.plusMinutes(minutes); delayed = true; }
    String getStatus() { return delayed ? "Delayed" : "On Time"; }
    public static void main(String[] args) {
        Airplane ap = new Airplane("FL123", "Paris", LocalTime.of(10, 30));
        System.out.println(ap.flightNumber + " to " + ap.destination + " departs at " + ap.departureTime + " (" + ap.getStatus() + ")");
        ap.delayFlight(60);
        System.out.println(ap.flightNumber + " to " + ap.destination + " departs at " + ap.departureTime + " (" + ap.getStatus() + ")");
    }
}
```
Output:
FL123 to Paris departs at 10:30 (On Time)  
FL123 to Paris departs at 11:30 (Delayed)

--------------------------------------------------------------------

13. Write a Java program to create a class called "Inventory" with a collection of products and methods to add and remove products, and to check for low inventory.
--------------------------------------------------------------------
```java
import java.util.*;
class Product {
    String name; int quantity;
    Product(String name, int quantity) { this.name = name; this.quantity = quantity; }
    public String toString() { return name + " (" + quantity + ")"; }
}
class Inventory {
    List<Product> products = new ArrayList<>();
    void addProduct(Product p) { products.add(p); }
    void removeProduct(Product p) { products.remove(p); }
    List<Product> lowInventory(int threshold) {
        List<Product> low = new ArrayList<>();
        for (Product p : products) if (p.quantity < threshold) low.add(p);
        return low;
    }
    void printProducts() { for (Product p : products) System.out.println(p); }
    public static void main(String[] args) {
        Inventory inv = new Inventory();
        Product prod1 = new Product("Pen", 5), prod2 = new Product("Notebook", 2);
        inv.addProduct(prod1); inv.addProduct(prod2);
        inv.printProducts();
        System.out.println("Low inventory: " + inv.lowInventory(3));
    }
}
```
Output:
Pen (5)  
Notebook (2)  
Low inventory: [Notebook (2)]

--------------------------------------------------------------------

14. Write a Java program to create a class called "School" with attributes for students, teachers, and classes, and methods to add and remove students and teachers, and to create classes.
--------------------------------------------------------------------
```java
import java.util.*;
class Student { String name; Student(String name) { this.name = name; } }
class School {
    List<Student> students = new ArrayList<>();
    List<String> teachers = new ArrayList<>();
    List<String> classes = new ArrayList<>();
    void addStudent(Student s) { students.add(s); }
    void removeStudent(Student s) { students.remove(s); }
    void addTeacher(String t) { teachers.add(t); }
    void removeTeacher(String t) { teachers.remove(t); }
    void createClass(String c) { classes.add(c); }
    void printInfo() {
        System.out.println("Students: " + students.size() + ", Teachers: " + teachers.size() + ", Classes: " + classes);
    }
    public static void main(String[] args) {
        School school = new School();
        Student s = new Student("Mike");
        school.addStudent(s);
        school.addTeacher("Mrs. Green");
        school.createClass("History");
        school.printInfo();
    }
}
```
Output:
Students: 1, Teachers: 1, Classes: [History]

--------------------------------------------------------------------

15. Write a Java program to create a class called "MusicLibrary" with a collection of songs and methods to add and remove songs, and to play a random song.
--------------------------------------------------------------------
```java
import java.util.*;
class Song { String title, artist; Song(String title, String artist) { this.title = title; this.artist = artist; } public String toString() { return title + " by " + artist; } }
class MusicLibrary {
    List<Song> songs = new ArrayList<>();
    void addSong(Song s) { songs.add(s); }
    void removeSong(Song s) { songs.remove(s); }
    void playRandomSong() {
        if (songs.isEmpty()) System.out.println("No songs to play.");
        else System.out.println("Playing: " + songs.get(new Random().nextInt(songs.size())));
    }
    public static void main(String[] args) {
        MusicLibrary ml = new MusicLibrary();
        Song song1 = new Song("SongA", "Artist1"), song2 = new Song("SongB", "Artist2");
        ml.addSong(song1); ml.addSong(song2);
        ml.playRandomSong();
        ml.removeSong(song1);
        ml.playRandomSong();
    }
}
```
Output (random):
Playing: SongB by Artist2  
Playing: SongB by Artist2

--------------------------------------------------------------------

16. Write a Java program to create a class called "Shape" with abstract methods for calculating area and perimeter, and subclasses for "Rectangle", "Circle", and "Triangle".
--------------------------------------------------------------------
```java
abstract class Shape {
    abstract double area();
    abstract double perimeter();
}
class RectangleShape extends Shape {
    double width, height;
    RectangleShape(double width, double height) { this.width = width; this.height = height; }
    double area() { return width * height; }
    double perimeter() { return 2 * (width + height); }
}
class CircleShape extends Shape {
    double radius;
    CircleShape(double radius) { this.radius = radius; }
    double area() { return Math.PI * radius * radius; }
    double perimeter() { return 2 * Math.PI * radius; }
}
class TriangleShape extends Shape {
    double a, b, c;
    TriangleShape(double a, double b, double c) { this.a = a; this.b = b; this.c = c; }
    double area() {
        double s = (a + b + c) / 2;
        return Math.sqrt(s * (s - a) * (s - b) * (s - c));
    }
    double perimeter() { return a + b + c; }
}
public class ShapeTest {
    public static void main(String[] args) {
        Shape rect = new RectangleShape(4, 5), circ = new CircleShape(3), tri = new TriangleShape(3, 4, 5);
        System.out.println("Rectangle area: " + rect.area() + ", perimeter: " + rect.perimeter());
        System.out.println("Circle area: " + circ.area() + ", perimeter: " + circ.perimeter());
        System.out.println("Triangle area: " + tri.area() + ", perimeter: " + tri.perimeter());
    }
}
```
Output:
Rectangle area: 20.0, perimeter: 18.0  
Circle area: 28.274333882308138, perimeter: 18.84955592153876  
Triangle area: 6.0, perimeter: 12.0

--------------------------------------------------------------------

17. Write a Java program to create a class called "Movie" with attributes for title, director, actors, and reviews, and methods for adding and retrieving reviews.
--------------------------------------------------------------------
```java
import java.util.*;
class Movie {
    String title, director;
    List<String> actors = new ArrayList<>();
    List<String> reviews = new ArrayList<>();
    Movie(String title, String director) { this.title = title; this.director = director; }
    void addActor(String actor) { actors.add(actor); }
    void addReview(String review) { reviews.add(review); }
    void printInfo() {
        System.out.println(title + " directed by " + director + ", Actors: " + actors + ", Reviews: " + reviews);
    }
    public static void main(String[] args) {
        Movie m = new Movie("Inception", "Nolan");
        m.addActor("Leonardo");
        m.addReview("Great!");
        m.printInfo();
    }
}
```
Output:
Inception directed by Nolan, Actors: [Leonardo], Reviews: [Great!]

--------------------------------------------------------------------

18. Write a Java program to create a class called "Restaurant" with attributes for menu items, prices, and ratings, and methods to add and remove items, and to calculate average rating.
--------------------------------------------------------------------
```java
import java.util.*;
class MenuItem {
    String name; double price; List<Integer> ratings = new ArrayList<>();
    MenuItem(String name, double price) { this.name = name; this.price = price; }
    void addRating(int rating) { ratings.add(rating); }
    double averageRating() {
        if (ratings.isEmpty()) return 0;
        int sum = 0; for (int r : ratings) sum += r;
        return (double) sum / ratings.size();
    }
    public String toString() { return name + " ($" + price + "), Avg Rating: " + averageRating(); }
}
class Restaurant {
    List<MenuItem> menu = new ArrayList<>();
    void addItem(MenuItem item) { menu.add(item); }
    void removeItem(MenuItem item) { menu.remove(item); }
    void printMenu() { for (MenuItem m : menu) System.out.println(m); }
    public static void main(String[] args) {
        Restaurant rest = new Restaurant();
        MenuItem mi = new MenuItem("Pizza", 12.5);
        mi.addRating(5); mi.addRating(4);
        rest.addItem(mi);
        rest.printMenu();
        rest.removeItem(mi);
        rest.printMenu();
    }
}
```
Output:
Pizza ($12.5), Avg Rating: 4.5

--------------------------------------------------------------------

19. Write a Java program to create a class with methods to search for flights and hotels, and to book and cancel reservations.
--------------------------------------------------------------------
```java
import java.util.*;
class Reservation {
    String type, details;
    Reservation(String type, String details) { this.type = type; this.details = details; }
    public String toString() { return type + ": " + details; }
}
class BookingSystem {
    List<Reservation> reservations = new ArrayList<>();
    List<String> searchFlights(String from, String to) {
        return Arrays.asList("Flight1: " + from + " to " + to, "Flight2: " + from + " to " + to);
    }
    List<String> searchHotels(String city) {
        return Arrays.asList("HotelA in " + city, "HotelB in " + city);
    }
    void bookReservation(String type, String details) {
        reservations.add(new Reservation(type, details));
    }
    void printReservations() { for (Reservation r : reservations) System.out.println(r); }
    public static void main(String[] args) {
        BookingSystem bs = new BookingSystem();
        System.out.println("Flights: " + bs.searchFlights("NYC", "LA"));
        System.out.println("Hotels: " + bs.searchHotels("LA"));
        bs.bookReservation("Flight", "NYC to LA");
        bs.bookReservation("Hotel", "HotelA in LA");
        bs.printReservations();
    }
}
```
Output:
Flights: [Flight1: NYC to LA, Flight2: NYC to LA]  
Hotels: [HotelA in LA, HotelB in LA]  
Flight: NYC to LA  
Hotel: HotelA in LA

--------------------------------------------------------------------